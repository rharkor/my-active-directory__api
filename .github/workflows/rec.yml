name: rec workflow

on:
  push:
    branches: ['rec']
  pull_request:
    branches: ['rec']

  workflow_dispatch:

jobs:
  security:
    name: TruffleHog Secrets Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    environment: rec
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create env
        run: |
          touch .env
          echo PORT=3001 >> .env
          echo DATABASE_KIND=postgres >> .env
          echo DATABASE_HOST=my-active-directory__db >> .env
          echo DATABASE_PORT=5432 >> .env
          echo DATABASE_USER=${{ vars.DATABASE_USER }} >> .env
          echo DATABASE_PASS=${{ secrets.DATABASE_PASS }} >> .env
          echo DATABASE_NAME=${{ vars.DATABASE_NAME }} >> .env
          echo ENV=production >> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          echo REDIS_HOST=my-active-directory__redis >> .env
          echo REDIS_PORT=6379 >> .env
          echo REDIS_PASS=${{ secrets.REDIS_PASS }} >> .env

          touch .env.docker
          echo DATABASE_USER=${{ vars.DATABASE_USER }} >> .env.docker
          echo DATABASE_PASS=${{ secrets.DATABASE_PASS }} >> .env.docker
          echo DATABASE_NAME=${{ vars.DATABASE_NAME }} >> .env.docker
          echo REDIS_PASS=${{ secrets.REDIS_PASS }} >> .env.docker

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Run tests
        run: npm run test -- --passWithNoTests

  build-and-deploy:
    runs-on: ubuntu-latest
    environment: rec

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create env
        run: |
          touch .env
          echo PORT=3001 >> .env
          echo DATABASE_KIND=postgres >> .env
          echo DATABASE_HOST=my-active-directory__db >> .env
          echo DATABASE_PORT=5432 >> .env
          echo DATABASE_USER=${{ vars.DATABASE_USER }} >> .env
          echo DATABASE_PASS=${{ secrets.DATABASE_PASS }} >> .env
          echo DATABASE_NAME=${{ vars.DATABASE_NAME }} >> .env
          echo ENV=production >> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          echo REDIS_HOST=my-active-directory__redis >> .env
          echo REDIS_PORT=6379 >> .env
          echo REDIS_PASS=${{ secrets.REDIS_PASS }} >> .env
          echo BACKUPS_USE_SCP=false >> .env

          touch .env.docker
          echo DATABASE_USER=${{ vars.DATABASE_USER }} >> .env.docker
          echo DATABASE_PASS=${{ secrets.DATABASE_PASS }} >> .env.docker
          echo DATABASE_NAME=${{ vars.DATABASE_NAME }} >> .env.docker
          echo REDIS_PASS=${{ secrets.REDIS_PASS }} >> .env.docker

      - name: Login to docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_KEY }}
          registry: registry.yuniq.agency

      - name: Build the rec docker image
        run: |
          docker build -t rec .
          docker tag rec:latest registry.yuniq.agency/my-active-directory/my-active-directory-api-rec:latest
          docker push registry.yuniq.agency/my-active-directory/my-active-directory-api-rec:latest

      - name: Push docker compose
        run: |
          eval $(ssh-agent -s)
          echo "${{ secrets.SSH_KEY }}" | tr -d '\r' | ssh-add - > /dev/null
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -t rsa ${{ vars.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

          ssh -p ${{ vars.SSH_PORT }} ${{ vars.SSH_USERNAME }}@${{ vars.SSH_HOST }} "mkdir -p ~/yuniq/my-active-directory/my-active-directory__api/rec"
          scp -P ${{ vars.SSH_PORT }} docker-compose.rec.yml ${{ vars.SSH_USERNAME }}@${{ vars.SSH_HOST }}:~/yuniq/my-active-directory/my-active-directory__api/rec/docker-compose.yml
          scp -P ${{ vars.SSH_PORT }} .env.docker ${{ vars.SSH_USERNAME }}@${{ vars.SSH_HOST }}:~/yuniq/my-active-directory/my-active-directory__api/rec/.env.docker

      - name: Deploy to rec
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ vars.SSH_PORT }}
          envs: REGISTRY_USERNAME, REGISTRY_KEY
          script: |
            cd ~/yuniq/my-active-directory/my-active-directory__api/rec
            docker login -u '${{ secrets.REGISTRY_USERNAME }}' -p '${{ secrets.REGISTRY_KEY }}' registry.yuniq.agency
            set -a
            source .env.docker
            docker compose -f docker-compose.yml pull
            docker system prune -f
            docker compose -f docker-compose.yml up -d
